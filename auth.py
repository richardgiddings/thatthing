from datetime import datetime, timedelta
from typing import Annotated
from fastapi import APIRouter, Depends, HTTPException
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm
from jose import JWTError, jwt
from passlib.context import CryptContext
from pydantic import BaseModel
from sqlalchemy.util import deprecated
from starlette import status
from sqlmodel import select
from decouple import config

from models import Users
from database import SessionDep


router = APIRouter(prefix="/auth", tags=["auth"])

# SECRET_KEY Can be generated by "openssl rand -hex 32" command.
SECRET_KEY = config('SECRET_KEY') 
ALGORITHM = "HS256"

# We use bcrypt to securely hash user passwords:
bcrypt_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
oauth2_bearer = OAuth2PasswordBearer(tokenUrl="auth/token")

# Token expiry from env
TOKEN_EXPIRY_IN_MINUTES = config('TOKEN_EXPIRY_IN_MINUTES', default=20, cast=int)

class CreateUserRequest(BaseModel):
    username: str
    password: str
    email: str
    full_name: str 
    disabled: bool

class Token(BaseModel):
    access_token: str
    token_type: str


@router.post("/", status_code=status.HTTP_201_CREATED)
async def create_user(session: SessionDep, create_user_request: CreateUserRequest):
    """
    Creates a new user with a hashed password and stores it in the database.

    Expects the following in the POST request:
        username  - a string
        email     - a string
        full_name - a string
        disabled  - true/false as a string
    """
    create_user_model = Users(
        username=create_user_request.username,
        hashed_password=bcrypt_context.hash(create_user_request.password),
        email=create_user_request.email,
        full_name=create_user_request.full_name,
        disabled=create_user_request.disabled
    )
    session.add(create_user_model)
    session.commit()


def authenticate_user(username: str, password: str, session: SessionDep):
    """
    Verifies the username and password against stored hashed password.
    Returns the user if authentication is successful, otherwise returns False.
    """
    user = session.exec(select(Users).filter_by(username=username)).first()
    if not user:
        return False
    if not bcrypt_context.verify(password, user.hashed_password):
        return False
    return user


def create_access_token(username: str, user_id: int, expires_delta: timedelta):
    """
    Generates a JWT access token with an expiration time.
    """
    encode = {"sub": username, "id": user_id}
    expires = datetime.now() + expires_delta
    encode.update({"exp": expires})
    return jwt.encode(encode, SECRET_KEY, algorithm=ALGORITHM)


def get_current_user(token: Annotated[str, Depends(oauth2_bearer)]):
    """
    Decodes the JWT token and retrieves user details.
    Raises an exception if the token is invalid or expired.
    """
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username: str = payload.get("sub")
        user_id: str = payload.get("id")
        if username is None or user_id is None:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Could not validate user",
            )

        return {"username": username, "id": user_id}

    except JWTError:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED, detail="Could not validate user"
        )


@router.post("/token", response_model=Token)
async def login_for_access_token(
    session: SessionDep,
    form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):
    """
    Authenticates user credentials and returns a JWT token if valid.
    """
    user = authenticate_user(form_data.username, form_data.password, session)

    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED, detail="Could not validate User"
        )
    username = user.username
    user_id = user.user_id
    token = create_access_token(username, user_id, timedelta(minutes=TOKEN_EXPIRY_IN_MINUTES))

    return {"access_token": token, "token_type": "bearer"}